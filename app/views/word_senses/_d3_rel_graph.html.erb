<style type="text/css">	
	#relGraph {
	  width: 800px;
	  height: 650px;
	  
	}
	.link {
	  fill: none;
	  stroke: #ccc;
	  stroke-width: 2px;
	}
	.label {
	  font-size: .75em;
	  font-family: 'Arvo';
	  font-weight: normal;
	  color: #000;
	  cursor: pointer;
	}
	.root-node-label {
	 font-size: 24px;
	 font-family: 'Arvo', sans-serif;
	 text-shadow: 0.1em 0.1em 0.1em rgba(0,0,0,.15);
	 vertical-align: center;
	}
	.large { font-size: 36px; }
	.hover { 
	  cursor: hand;
	}
	.legend-container { 
	  font-size: 11px;
	  font-family: 'Arvo';
	}
	.legend {
	 font-size: 13px;
	}
</style>
<div id="relGraph" style="display: none"></div>
<div class="graphSelectBox">
    	<%= raw t('graphs.view_select.first', :href => link_to(t('graphs.concept_hierarchy'), '#begreber'), :current => t('graphs.relations')) %>
</div>
<script type="text/javascript">
	function dist(x1,y1,x2,y2) {
	  return Math.sqrt(Math.pow(x1-x2, 2) + Math.pow(y1-y2, 2));
	}

	function quadrant(x,y) {Â 
	  if (x > 0 && y < 0) return 1;
	  if (x < 0 && y < 0) return 2;
	  if (x < 0 && y > 0) return 3;
	  if (x > 0 && y > 0) return 4;
	}

	function atTopOrButtom(x) {
	  return x > -50 && x < 50;
	}

	var flare = <%= @related_syn_sets.to_json.html_safe %>;
	<% outer_node_count = @related_syn_sets.values.flatten.size %>;

	var outerNodeCount = <%= outer_node_count %>;
	var outerNodeSlice = 2*Math.PI/outerNodeCount;

	// Ordinal scale
	var colors = d3.scale.category20();
	
	// SVG Panel
	var h = 600;
	var w = 750;
	var r = 200;
	var svg = d3.select('#relGraph').append('svg').attr('top', 30).attr('width', w).attr('height', h);
    var container = svg.append("g").attr("class", "container").attr("transform", "translate(" + (w/2 - 75) + ", " + (h/2 + 30) + ")");

	// Tree layout
	var tree = d3.layout.cluster().size([360, r]).separation(function(a, b) { return ((a.parent == b.parent) && (a.rel_type == b.rel_type) ? 1 : 2) / a.depth; }); // leaf nodes at same (one) level
	var nodes = tree.nodes(flare);
	var links = tree.links(nodes);
	
	// 360 rotation
	var diagonal = d3.svg.diagonal.radial().projection(function(d) { 
		return [d.y, d.x / 180 * Math.PI];
	});
	
	// Path/Line
	container.append("g").attr("class", "tree").selectAll(".link").data(links).enter()
		.append("path")
		.style("stroke", function(d) { return colors(d.target.rel_type); })
		.attr("class", "link")
		.attr("d", diagonal);
		
	// Nodes
	var nodeGroup = container.select(".tree").selectAll("g.node")
     .data(nodes)
     .enter()
     .append("g")
     .attr("class", "node")
     .attr("transform", function(d) {
           return "rotate(" + (d.x - 90) + ")translate(" + d.y + ")";
     });
     
     nodeGroup.append("symbol")
     .attr("class", "node")
     .size(0);
	
	 // Label
	 var label = nodeGroup.append("text")
	 .attr("class", "label")
     .attr("dy", ".31em")
     .text(function(d) { return d.name; })
     .attr("text-anchor", function(d) { return d.x < 180 ? "start" : "end"; })
     .attr("transform", function(d) { return d.x < 180 ? "translate(8)" : "rotate(180)translate(-8)"; })
     .attr("visibility", function(d) { return d.depth > 0  ? "visible" : "hidden" })
     .on("mouseover", function() { d3.select(this).attr("class", "label hover")})
     .on("mouseout", function() { d3.select(this).attr("class", "label") })
     .on("click", function(d) { document.location = d.link; });     
     
     // Tooltip
     label.append("title").text(function(d) { return d.gloss; });
     
     // Sense lemma  
     container.append("text")
	  .attr("class", "root-node-label")
	  .attr("dy", ".31em")
	  .attr("text-anchor", "middle")
	  .classed("large", function(d) { return nodes[0].name.length <= 10; })
      .text(nodes[0].name);
      
      // Legend
	  var myKeys=d3.nest()
  		.key(function(d) {return d.rel_type;})
  		.entries(flare.children);
	  var legend_container = svg.append("g").attr("class", "legend-container").attr("transform", "translate(600, 125)");
	  legend_container.append("text").text("RELATIONER").attr("text-anchor", "start").attr("transform", "translate(0,0)");
	  var legend = legend_container.selectAll(".legend")
      .data(myKeys)
      .enter().append("g")
      .attr("class", "legend")
      .attr("transform", function(d, i) { return "translate(0," + ((i*20)+20) + ")"; });
	  
	  legend.append("rect")
	      .attr("width", 8)
	      .attr("height", 8)
	      .style("fill", function(d) { return colors(d.key); })
	      .attr("transform", "translate(5, 5)");
	  
	  legend.append("text")
	      .attr("y", 8)
	      .attr("dy", ".35em")
	      .style("text-anchor", "start")
	      .text(function(d) { return d.key; })
	      .attr("transform", "translate(15, 0)");	      
      
      
</script>
